<?xml version='1.0' encoding='UTF-8'?>
<testsuite hostname="Erics-MBP.nyc.outbrain.com" name="org.functionalkoans.forscala.Koans" tests="38" errors="0" failures="0" time="-0.038">
                     <properties>
      <property name="jline.esc.timeout" value="0"/><property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/><property name="sun.boot.library.path" value="/Library/Java/JavaVirtualMachines/jdk1.8.0_45.jdk/Contents/Home/jre/lib"/><property name="java.vm.version" value="25.45-b02"/><property name="gopherProxySet" value="false"/><property name="java.vm.vendor" value="Oracle Corporation"/><property name="java.vendor.url" value="http://java.oracle.com/"/><property name="path.separator" value=":"/><property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/><property name="file.encoding.pkg" value="sun.io"/><property name="user.country" value="US"/><property name="sun.java.launcher" value="SUN_STANDARD"/><property name="sun.os.patch.level" value="unknown"/><property name="java.vm.specification.name" value="Java Virtual Machine Specification"/><property name="user.dir" value="/Users/exu/Desktop/code/scala/koans/specs/dmarsh-scalakoansexercises-ebbe18119d70"/><property name="java.runtime.version" value="1.8.0_45-b14"/><property name="java.awt.graphicsenv" value="sun.awt.CGraphicsEnvironment"/><property name="java.endorsed.dirs" value="/Library/Java/JavaVirtualMachines/jdk1.8.0_45.jdk/Contents/Home/jre/lib/endorsed"/><property name="os.arch" value="x86_64"/><property name="java.io.tmpdir" value="/var/folders/fc/7qyc4rsn4mx66qdmqnhrvnmr0000gp/T/"/><property name="line.separator" value="
"/><property name="java.vm.specification.vendor" value="Oracle Corporation"/><property name="os.name" value="Mac OS X"/><property name="sun.jnu.encoding" value="UTF-8"/><property name="java.library.path" value="/Users/exu/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:."/><property name="java.specification.name" value="Java Platform API Specification"/><property name="java.class.version" value="52.0"/><property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/><property name="os.version" value="10.10.5"/><property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/><property name="user.home" value="/Users/exu"/><property name="user.timezone" value="America/New_York"/><property name="java.awt.printerjob" value="sun.lwawt.macosx.CPrinterJob"/><property name="file.encoding" value="UTF-8"/><property name="java.specification.version" value="1.8"/><property name="java.class.path" value="/usr/local/Cellar/sbt/0.13.9/libexec/sbt-launch.jar"/><property name="user.name" value="exu"/><property name="jline.shutdownhook" value="false"/><property name="java.vm.specification.version" value="1.8"/><property name="sun.java.command" value="/usr/local/Cellar/sbt/0.13.9/libexec/sbt-launch.jar"/><property name="java.home" value="/Library/Java/JavaVirtualMachines/jdk1.8.0_45.jdk/Contents/Home/jre"/><property name="sun.arch.data.model" value="64"/><property name="user.language" value="en"/><property name="java.specification.vendor" value="Oracle Corporation"/><property name="awt.toolkit" value="sun.lwawt.macosx.LWCToolkit"/><property name="java.vm.info" value="mixed mode"/><property name="java.version" value="1.8.0_45"/><property name="java.ext.dirs" value="/Users/exu/Library/Java/Extensions:/Library/Java/JavaVirtualMachines/jdk1.8.0_45.jdk/Contents/Home/jre/lib/ext:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java"/><property name="sun.boot.class.path" value="/Library/Java/JavaVirtualMachines/jdk1.8.0_45.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_45.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_45.jdk/Contents/Home/jre/lib/sunrsasign.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_45.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_45.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_45.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_45.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_45.jdk/Contents/Home/jre/classes"/><property name="java.vendor" value="Oracle Corporation"/><property name="file.separator" value="/"/><property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/"/><property name="sun.io.unicode.encoding" value="UnicodeBig"/><property name="sun.cpu.endian" value="little"/><property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/><property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/><property name="sun.cpu.isalist" value=""/>
    </properties>
                     <testcase classname="org.functionalkoans.forscala.Koans" name="asserts can take a boolean argument" time="-0.001">
                                                 
                                               </testcase><testcase classname="org.functionalkoans.forscala.Koans" name="asserts can include a message" time="-0.001">
                                                 
                                               </testcase><testcase classname="org.functionalkoans.forscala.Koans" name="true and false values can be compared with should matchers" time="-0.001">
                                                 
                                               </testcase><testcase classname="org.functionalkoans.forscala.Koans" name="booleans in asserts can test equality" time="-0.001">
                                                 
                                               </testcase><testcase classname="org.functionalkoans.forscala.Koans" name="sometimes we expect you to fill in the values" time="-0.001">
                                                 
                                               </testcase><testcase classname="org.functionalkoans.forscala.Koans" name="Vars are variables, and may be reassigned" time="-0.001">
                                                 
                                               </testcase><testcase classname="org.functionalkoans.forscala.Koans" name="vals are values, and may not be reassigned, analogous to final in Java" time="-0.001">
                                                 
                                               </testcase><testcase classname="org.functionalkoans.forscala.Koans" name="All vals and var types are inferred by default, but you can add the type explicitly" time="-0.001">
                                                 
                                               </testcase><testcase classname="org.functionalkoans.forscala.Koans" name="If you want to include a space in your variable or value use backticks" time="-0.001">
                                                 
                                               </testcase><testcase classname="org.functionalkoans.forscala.Koans" name="Any strange characters that you wish to use in a variable or value can be used after an underscore" time="-0.001">
                                                 
                                               </testcase><testcase classname="org.functionalkoans.forscala.Koans" name="Backticks can also be used to spite your co-workers and send them into a spiral of confusion and agony!" time="-0.001">
                                                 
                                               </testcase><testcase classname="org.functionalkoans.forscala.Koans" name=" Note there is no lazy var" time="-0.001">
                                                 
                                               </testcase><testcase classname="org.functionalkoans.forscala.Koans" name="Boolean literals are either true or false, using the true or false keyword" time="-0.001">
                                                 
                                               </testcase><testcase classname="org.functionalkoans.forscala.Koans" name="Integer Literals are 32-bit and can be created from decimal, hexadecimal" time="-0.001">
                                                 
                                               </testcase><testcase classname="org.functionalkoans.forscala.Koans" name="Long Literals are 64 bit, are specified by appending an L or l at the end;
   l is rarely used since it looks like a 1" time="-0.001">
                                                 
                                               </testcase><testcase classname="org.functionalkoans.forscala.Koans" name="
   Exponent are specified using e or E" time="-0.001">
                                                 
                                               </testcase><testcase classname="org.functionalkoans.forscala.Koans" name="Character Literals are quoted with single quotes" time="-0.001">
                                                 
                                               </testcase><testcase classname="org.functionalkoans.forscala.Koans" name="Character Literals can use hexadecimal Unicode" time="-0.001">
                                                 
                                               </testcase><testcase classname="org.functionalkoans.forscala.Koans" name="Character Literals can use octal as well" time="-0.001">
                                                 
                                               </testcase><testcase classname="org.functionalkoans.forscala.Koans" name="Character Literals can use escape sequences" time="-0.001">
                                                 
                                               </testcase><testcase classname="org.functionalkoans.forscala.Koans" name="One-Line String Literals are surrounded by quotation marks" time="-0.001">
                                                 
                                               </testcase><testcase classname="org.functionalkoans.forscala.Koans" name="String Literals can contain escape sequences" time="-0.001">
                                                 
                                               </testcase><testcase classname="org.functionalkoans.forscala.Koans" name="Multiline String literals
	are surrounded
	by three quotation marks" time="-0.001">
                                                 
                                               </testcase><testcase classname="org.functionalkoans.forscala.Koans" name="Use stripMargin to prettify multi-line strings" time="-0.001">
                                                 
                                               </testcase><testcase classname="org.functionalkoans.forscala.Koans" name="
 When a method includes a `=` after the method declaration that
 will infer the return type" time="-0.001">
                                                 
                                               </testcase><testcase classname="org.functionalkoans.forscala.Koans" name="If you want to include the return type explicitly,
 no one will stop you" time="-0.001">
                                                 
                                               </testcase><testcase classname="org.functionalkoans.forscala.Koans" name="If a method returns two different types and no explicit
 return type is defined,
 the type of the method will likely be inferred as the
 common super parent of the two types being returned" time="-0.001">
                                                 
                                               </testcase><testcase classname="org.functionalkoans.forscala.Koans" name="If a method does not of have equal it is considered `Unit` which is analogous to `void` in Java" time="-0.001">
                                                 
                                               </testcase><testcase classname="org.functionalkoans.forscala.Koans" name="If you want to have an = on the method, while still explicitly returning Unit you can make the return type `Unit`,
 this also analogous to `void" time="-0.001">
                                                 
                                               </testcase><testcase classname="org.functionalkoans.forscala.Koans" name="Once you have an =, it is understood that there will be a return type and can be inferred" time="-0.001">
                                                 
                                               </testcase><testcase classname="org.functionalkoans.forscala.Koans" name="Of course if you wish to be explicit about the return type, you can attach it at the end of the method" time="-0.001">
                                                 
                                               </testcase><testcase classname="org.functionalkoans.forscala.Koans" name="When performing recursion, the
return type on the method is mandatory!" time="-0.001">
                                                 
                                               </testcase><testcase classname="org.functionalkoans.forscala.Koans" name=" The 
 Scala compiler will optimize the code from stack recursion into a loop at compile time" time="-0.001">
                                                 
                                               </testcase><testcase classname="org.functionalkoans.forscala.Koans" name="In scala, methods can be placed inside in methods! This comes useful for
 recursion where accumulator helper methods can be placed inside the outer
  method, or you just want to place one method in another for design reasons" time="-0.001">
                                                 
                                               </testcase><testcase classname="org.functionalkoans.forscala.Koans" name="Remember you can have strange characters in values and variables as long as they're
  after an underscore, well you can do the same in methods" time="-0.001">
                                                 
                                               </testcase><testcase classname="org.functionalkoans.forscala.Koans" name=" Although please note that this is uncommon unless you really are into
 internal DSLs" time="-0.001">
                                                 
                                               </testcase><testcase classname="org.functionalkoans.forscala.Koans" name="Convention (not required for the compiler) states that if you a call a method that
returns a Unit, invoke that method with empty parenthesis, other leave the parenthesis out" time="-0.001">
                                                 
                                               </testcase><testcase classname="org.functionalkoans.forscala.Koans" name="Methods with colons are right-associative, that means the object that a method is on will be on
the _right_ and the method parameter will be on the _left_" time="-0.001">
                                                 
                                               </testcase>
                     <system-out></system-out>
                     <system-err></system-err>
                   </testsuite>